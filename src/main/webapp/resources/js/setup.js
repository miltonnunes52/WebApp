function setSidebarHeight(){
	setTimeout(function(){
var height = $(document).height();
    $('.grid_12').each(function () {
        height -= $(this).outerHeight();
    });
    height -= $('#site_info').outerHeight();
	height-=1;
	//salert(height);
    $('.sidemenu').css('height', height);					   
						},100);
}

//Dashboard chart
function setupDashboardChart(containerElementId) {
    var s1 = [200, 300, 400, 500, 600, 700, 800, 900, 1000];
    var s2 = [190, 290, 390, 490, 590, 690, 790, 890, 990];
    var s3 = [250, 350, 450, 550, 650, 750, 850, 950, 1050];
    var s4 = [2000, 1600, 1400, 1100, 900, 800, 1550, 1950, 1050];
    // Can specify a custom tick Array.
    // Ticks should match up one for each y value (category) in the series.
    var ticks = ['March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November'];

    var plot1 = $.jqplot(containerElementId, [s1, s2, s3, s4], {
        // The "seriesDefaults" option is an options object that will
        // be applied to all series in the chart.
        seriesDefaults: {
            renderer: $.jqplot.BarRenderer,
            rendererOptions: { fillToZero: true }
        },
        // Custom labels for the series are specified with the "label"
        // option on the series option.  Here a series option object
        // is specified for each series.
        series: [
            { label: 'Apples' },
            { label: 'Oranges' },
            { label: 'Mangoes' },
            { label: 'Grapes' }
        ],
        // Show the legend and put it outside the grid, but inside the
        // plot container, shrinking the grid to accomodate the legend.
        // A value of "outside" would not shrink the grid and allow
        // the legend to overflow the container.
        legend: {
            show: true,
            placement: 'outsideGrid'
        },
        axes: {
            // Use a category axis on the x axis and use our custom ticks.
            xaxis: {
                renderer: $.jqplot.CategoryAxisRenderer,
                ticks: ticks
            },
            // Pad the y axis just a little so bars can get close to, but
            // not touch, the grid boundaries.  1.2 is the default padding.
            yaxis: {
                pad: 1.05,
                tickOptions: { formatString: '$%d' }
            }
        }
    });
}

//Dashboard chart
function setupDashboardChart1(containerElementId) {
    var s1 = [1, 0, 3, 3, 5, 2, 2, 4, 2];
    var s2 = [1, 2, 4, 5, 1, 3, 4, 3, 3];
    var s3 = [0, 1, 0, 0, 2, 0, 0, 0, 0];
    // Can specify a custom tick Array.
    // Ticks should match up one for each y value (category) in the series.
    var ticks = ['Sábado', 'Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta'];

    var plot1 = $.jqplot(containerElementId, [s1, s2, s3], {
        // The "seriesDefaults" option is an options object that will
        // be applied to all series in the chart.
        seriesDefaults: {
            renderer: $.jqplot.BarRenderer,
            rendererOptions: { fillToZero: true }
        },
        // Custom labels for the series are specified with the "label"
        // option on the series option.  Here a series option object
        // is specified for each series.
        series: [
            { label: 'Rato' },
            { label: 'Teclado' },
            { label: 'Acelarometro' }
        ],
        // Show the legend and put it outside the grid, but inside the
        // plot container, shrinking the grid to accomodate the legend.
        // A value of "outside" would not shrink the grid and allow
        // the legend to overflow the container.
        legend: {
            show: true,
            placement: 'outsideGrid'
        },
        axes: {
            // Use a category axis on the x axis and use our custom ticks.
            xaxis: {
                renderer: $.jqplot.CategoryAxisRenderer,
                ticks: ticks
            },
            // Pad the y axis just a little so bars can get close to, but
            // not touch, the grid boundaries.  1.2 is the default padding.
            yaxis: {
                pad: 1.0,
                tickOptions: { formatString: '%d' }
            }
        }
    });
}

//Dashboard chart
function setupDashboardChart2(containerElementId) {
    //var s1 = [6925, 19433, 17532, 11749, 12854, 15103, 14073, 7572, 7869, 616, 4318, 12993, 15108, 11727, 6440, 4571, 10630, 4454, 542, 5138, 7458, 4361, 7003, 16880, 13404, 6239, 3579, 13966, 14279, 15479, 2641, 6955, 1811, 6380, 2243, 2856, 1398, 7814, 18710, 2733, 11714, 12680, 15297, 3970, 18246, 19029, 18083, 17240, 6152, 14582, 17844, 13532, 2949, 10782, 14611, 11888, 11211, 10190, 12580, 4277, 11334, 2899, 19867, 3139, 9214, 3617, 11326, 13269, 7151, 14421, 10426, 8930, 19247, 9251, 9810, 7821, 16915, 8204, 12306, 19680, 6449, 10711, 12500, 4000, 7728, 9462, 13423, 8418, 6448, 1232, 17561, 1631, 15793, 5919, 19015, 6073, 1404, 7965, 7874, 17729, 18633, 236, 15353, 19609, 10893, 15147, 19832, 8822, 13445, 2862, 3240, 15097, 390, 470, 9394, 12366, 18589, 15862, 10709, 4333, 1030, 5257, 12201, 10381, 7122, 3471, 9571, 8559, 9606, 463, 9443, 53, 15267, 15215, 12245, 9043, 13147, 6578, 205, 14740, 4027, 4723, 9031, 13567, 18386, 14543, 17347, 6100, 8468, 1767, 11509, 4055, 8627, 5962, 12850, 6258, 1754, 10925, 12714, 19907, 13439, 3082, 10633, 9117, 8998, 4931, 13296, 11839, 15581, 4696, 1282, 3607, 18210, 4411, 3293, 12279, 19784, 13316, 18885, 14982, 13094, 594, 1164, 13663, 1955, 8964, 13185, 68, 10913, 13288, 7570, 17634, 791, 12196, 11087, 11400, 9908, 4513, 15613, 1185, 15754, 8092, 14831, 5971, 10224, 18959, 17721, 14580, 4622, 8626, 7782, 7946, 12625, 18383, 6974, 2888, 12653, 13177, 1695, 3354, 9186, 2468, 18544, 9608, 3503, 12785, 778, 10316, 1994, 9576, 70, 974, 8139, 8776, 19601, 13603, 12213, 5995, 18078, 18618, 2653, 19671, 4671, 6208, 11044, 7299, 7607, 13216, 3125, 1378, 6471, 16971, 15855, 1229, 10117, 16798, 2916, 4213, 123, 16386, 2285, 16231, 15289, 17875, 7343, 19587, 15571, 8263, 12640, 6871, 5011, 7123, 10696, 3859, 337, 14548, 16435, 6570, 9199, 16329, 5113, 11475, 19033, 2344, 10428, 4093, 10687, 17314, 18901, 18598, 15046, 6857, 7818, 4173, 2132, 4636, 7620, 16450, 423, 6183, 1686, 2297, 12827, 4623, 5674, 4981, 1500, 11317, 3173, 18826, 2742, 8794, 16054, 17143, 13900, 9376, 10989, 10081, 17914, 8404, 5910, 7227, 3259, 13469, 11329, 18841, 8773, 765, 6467, 5635, 2209, 6528, 8645, 9784, 11633, 16803, 17720, 18174, 12693, 1316, 19709, 4672, 8751, 13850, 15901, 7719, 9116, 8696, 4099, 12329, 2131, 16449, 9503, 12768, 5327, 16824, 7671, 12479, 5800, 17553, 19695, 15974, 8716, 16490, 8972, 6765, 2806, 10115, 3232, 9594, 17441, 14938, 18189, 18783, 18724, 5893, 17279, 12079, 1737, 2893, 3014, 9127, 4490, 12283, 4409, 18955, 18235, 370, 19310, 16362, 493, 8503, 17440, 9729, 12315, 16849, 8694, 15095, 18524, 19129, 12100, 15683, 10312, 13010, 8695, 10993, 18218, 9176, 1150, 8127, 2717, 7047, 9187, 16927, 16976, 11185, 19361, 17117, 12772, 5990, 11776, 16901, 12957, 12190, 8493, 19497, 10563, 5954, 12736, 17330, 10281, 7405, 10678, 18848, 5604, 4910, 14721, 2074, 4239, 19103, 13880, 13918, 12161, 14328, 5282, 18257, 19333, 6635, 17298, 12529, 18306, 16932, 5358, 5207, 4946, 13640, 19906, 9144, 5945, 5681, 7632, 4654, 12169, 7169, 5031, 7531, 890, 12812, 10982, 2009, 2207, 14379, 10489, 10690, 5089, 13752, 12346, 8114, 9963, 15513, 5114, 4111, 12921, 10159, 14967, 1778, 8379, 2775, 10531, 9764, 13969, 4087, 7588, 5342, 14098, 7031, 19984, 4492, 588, 10954, 12467, 4020, 3820, 5320, 17434, 8955, 16016, 19623, 5819, 8984, 4365, 1525, 4547, 11, 12218, 13222, 5909, 16592, 13713, 9829, 14571, 14735, 19143, 19244, 10182, 4679, 16871, 6233, 939, 14021, 2389, 2744, 3292, 13217, 14789, 15286, 18020, 19524, 11099, 13455, 5102, 10162, 13824, 8206, 5398, 6808, 16694, 5261, 13383, 7842, 17669, 16019, 2820, 16684, 9583, 17398, 10860, 215, 15521, 17420, 11140, 13153, 19059, 1433, 4783, 15204, 8496, 18496, 18131, 10526, 18249, 17544, 12531, 8355, 12429, 9873, 15962, 6153, 11957, 18876, 10284, 12508, 2503, 3315, 5168, 17227, 3708, 12947, 7288, 12396, 3495, 11671, 3808, 4225, 8477, 6131, 13130, 13942, 6207, 18212, 17335, 17845, 690, 505, 2937, 1962, 7223, 6679, 2654, 15590, 2036, 4129, 15556, 18404, 7129, 15728, 8184, 6170, 14462, 7484, 7575, 19514, 2082, 4878, 8020, 10229, 13360, 16377, 11246, 3772, 6664, 18680, 14650, 12881, 11805, 271, 19927, 57, 16330, 18840, 13048, 2981, 7110, 140, 12316, 4360, 1070, 9035, 19953, 3601, 10867, 19186, 12642, 14148, 7936, 11088, 18791, 2248, 4653, 1033, 7655, 12139, 16078, 7866, 5145, 9431, 4755, 10302, 1175, 10604, 10155, 6490, 1887, 19291, 6641, 19327, 3673, 16353, 3006, 11470, 13242, 16038, 7586, 11819, 19546, 1029, 19664, 10326, 16941, 13254, 16830, 5026, 19256, 14199, 688, 3874, 16071, 10338, 17737, 13240, 13731, 8215, 1159, 5632, 10684, 14671, 16598, 7173, 10695, 16650, 1447, 18124, 15502, 2108, 16580, 15143, 7791, 3327, 14749, 6176, 19265, 8202, 8939, 9341, 106, 14916, 10749, 3408, 13537, 12259, 4593, 9307, 3593, 19373, 11543, 9877, 12851, 8142, 19167, 15726, 12690, 18445, 4708, 5157, 6707, 1505, 4186, 10328, 3723, 2159, 3035, 17035, 8134, 7314, 595, 18371, 10111, 1963, 6320, 16960, 11143, 3540, 1410, 12742, 12754, 15122, 14086, 13176, 1627, 6599, 15188, 7073, 12171, 17052, 16146, 12174, 4614, 19536, 11656, 793, 10738, 12828, 18624, 946, 2985, 6230, 246, 5673, 13852, 17804, 13107, 18715, 13096, 3548, 13657, 12632, 19815, 4075, 3047, 2413, 14065, 15253, 6363, 13524, 12150, 10572, 19275, 1493, 12700, 14330, 15810, 16155, 6654, 12489, 16007, 832, 7647, 15859, 6212, 2095, 13482, 12603, 4255, 10140, 2405, 12862, 8192, 824, 19321, 8959, 15955, 8753, 8752, 9105, 15866, 12749, 16707, 564, 7395, 11118, 58, 988, 18616, 15385, 918, 3489, 19749, 11773, 7689, 8390, 6825, 6805, 11559, 11375, 10682, 18132, 5789, 17948, 4904, 12969, 14412, 3554, 2966, 3619, 17594, 6519, 7768, 6310, 14976, 7964, 8232, 18171, 15680, 18252, 919, 17163, 4091, 14408, 3934, 12644, 4631, 1854, 7302, 6105, 3847, 4270, 5533, 17747, 15813, 4972, 13453, 5440, 3002, 19337, 2801, 10434, 3574, 17809, 6983, 3671, 19062, 3162, 3452, 12146, 9844, 6783, 17651, 3224, 17839, 9940, 19009, 15573, 10753, 10384, 17523, 14930, 9875, 18674, 8915, 4790, 8980, 18110, 18344, 7032, 941, 10114, 6341, 11398, 13939, 2130, 19287, 2445, 11674, 6555, 16555, 18900, 17299, 10528, 7790, 13388, 9232, 4668, 11442, 3945, 14419, 15241, 7988, 1559, 3268, 11483, 10334, 19691, 15380, 3467, 5032, 1574, 15135, 13797, 17661, 12185, 14499, 16989, 2868, 4035, 5837, 16677, 15088, 5493, 1813, 7742, 8846, 19909, 9171, 10588, 1299, 9705, 6013, 339, 4737, 11066, 19665, 2314, 6501, 15922, 13430, 18921, 17050, 3842, 1265, 2322, 16731, 2791, 4893, 9545, 12010, 19808, 18512, 13758, 15066, 13992];
    var s1= [4007.41829289464,691.242272787593,1447.81511835226,2733.58283228024,6889.44342804127,6713.58643095636,5505.81724883272,16400.0449307737,4370.73589363771,3289.64964676016,8537.57670945996,21963.7582710305,5124.83207742197,3391.67375267808,20068.7626148574,2600.27845054036,4649.38031381467,26320.0755896997,2663.38521263522,5215.64415415658,6862.51286089989,2132.49949208569,2625.89736150914,39867.457025777,3563.68133737168,2180.2199229597,3302.06496216213,2637.46266098839,1012.10407746796,2694.24826270531,11800.1807834494,4354.69980383397,2328.8413323055,6528.56829452037,10916.9088632441,4616.31890289014,638.466996533323,2770.67572155879,6570.55552868888,5136.03391643579,2706.55191097281,2542.90921481497,10385.1448541263,1364.22443084896,3363.63265965129,4731.33373500436,16839.4629085233,2259.7442476577,1176.10849649243,8101.19205688936,1150.0552185605,4060.0222304063,969.242008312616,2700.91052956335,2844.03460799022,33284.2515841062,6392.45835688796,2698.76258738304,225,5377.5356298522,3623.08344224174,1837.34942187358,2267.99808448461,3229.53265154172,1293.78179311327,1782.77403277228,2792.41718267578,5418.51258467079,9409.954058024,3141.00377094305,7524.99791915481,6455.55985628766,2311.40029211899,3581.23086892594,884.996810458878,11538.6986097417,7967.43198283391,2050.84254282901,15693.8403877729,6785.95113877049,951.031056852964,1441.16403022208,3483.31853329988,574.764254703427,4858.32731579793,11526.3625257025,6716.8118536743,386.336778356074,11231.7036483925,1117.13290400149,16023.4414546364,8690.19012122754,6110.09945553141,2889.04712418047,3864.19934183645,3200.25829854031,3231.16524813657,1681.0581899022,4439.47671674256,3077.51868320159,4436.87627955429,4819.06119452413,25893.1217541444,8918.0313097929,5281.75193216265,2229.39030706246,1980,2206.77044211442,97.5580037453189,8835.16800878751,2356.40250448087,2071.96205193403,3947.31961650818,2243.4678677689,4799.32746080055,5883.263441764,2113.08802179513,6772.21720807976,1607.7406198978,14834.9013473612,5807.68968340797,9385.98609603625,7815.9435050213,2622.31501847927,5207.52040941662,12747.320913328,2943.34145347358,441.869897645844,6862.63434988936,1200.23111992638,4069.24305538307,6433.53366671691,15537.1191540996,29508.484880663,3188.55494616732,4654.14404181247,7753.24727080857,7113.29329148367,12465.7147014164,17210.9209598328,6546.7920275019,14173.5892028185,12456.6323912306,4508.13010235415,4056.06090255661,15668.2699468835,16150.4436040221,1823.54944858724,4475.00839599014,850.264636341344,36651.4679766727,6844.35762422807,2970.38944221917,1521.41270043384,20724.3501435474,1400.86702813465,943.5067094025,476.565051177078,2634.23142970402,1900.30484646876,3863.91673255954,1386.86989764584,3315.73378785288,502.890372458075,8869.84040400102,9592.23340613425,976.646399246745,3518.03953179739,812.437750470262,5885.90951391782,2760.20251683507,5007.68859277305,3271.16091913038,2276.63943597263,13173.3834359539,8531.29692504657,3161.27106051117,4871.30923763896,1762.41085445404,540,3691.68967374957,8053.31529793091,2421.8021042863,7300.31908369073,1637.59002770438,903.815711064435,15262.1795290189,6349.81657972229,9263.53979269864,4610.43004611081,3583.3048645675,17484.7015459093,2208.85761843378,5724.67868558743,4961.73146707849,2573.41418390096,3117.96521283541,1575.13862339297,1690.99889325608,5107.42551153464,3568.09725032388,5590.76625311981,955.131213793622,284.863023681015,835.352746914734,9097.19330705519,1893.25480414023,1491.47019871768,1656.86989764584,11975.6265651817,1300.63845519594,1749.97695785441,976.786286866971,1200.56107283269,349.695153531234,2977.90410795037,10348.4253884446,3812.82108281593,13091.223705233,377.67551488154,6747.93551061687,2772.33529277638,10525.5646376343,5407.59723702028,8370.68013268103,690.495268872049,6493.26197440815,7404.00794089172,139.550281137663,7940.88401996508,339.250385040818,454.244540765332,12254.7320720921,3004.34031248481,5145.04473534825,1691.0294860335,3478.61513582889,17611.9092010894,360,3510,900,3270.31988821737,1117.15055986965,5425.9710646676,16494.1215660081,28319.7201306854,1222.25176955655,4261.93032968399,4685.14166950593,751.752040524513,1511.34147320226,11615.3127689079,5150.78919088395,6442.01619045131,7768.70645553792,5210.52846459775,760.550277650936,11313.5754096917,1440,2103.68900960734,824.938337102943,13188.6276192943,5065.64472691169,10249.4752504132,5005.26039176858,4037.87731528484,2974.73523940469,708.030029179397,2530.36992954942,1862.97978720472,1725.60308182655,40.1261035777952,9129.78305276978,1142.72462691212,2859.8947339262,14005.5441999505,6034.73234680676,6256.1029022642,5426.62568088801,187.495395127884,6953.11036982433,4191.04672505011,2862.55586014615,5383.27770553932,1002.54868172926,2271.31279497143,8709.91689162191,8046.41602008454,3598.21758722777,2797.5478120989,1997.26447447482,3468.93431667925,6078.377654062,5450.5853140187,188.171233559949,6476.28916573373,17334.7530967405,2577.43412800507,7431.00324347013,181.2235117387,8496.93005377093,2093.48796621231,1073.26707867314,3305.73193769145,7536.9094534036,3853.11673656034,11060.5270339911,2421.14002497438,846.866547799053,1663.66675200358,7627.38013505196,4045.49076240605,6202.22097178246,195.846051246805,17789.8021062721,8826.03176116342,1517.98198808501,6843.13852698849,8097.85089996999,2964.05833198674,9745.27640772453,9738.45895631624,4623.00745601187,8930.6767169881,11402.4670292362,2678.70245223728,6492.38509801152,8023.06376196998,10552.0155647879,2751.87184568893,3499.04690214052,5786.13205955402,6513.71005247315,3736.35306361839,5705.9983218642,8442.44239851344,2585.96332098757,5327.10049466761,13562.2146316222,7590.06708957791,6676.69964725552,4255.78070351923,4250.6100199405,4559.04639105183,4478.43318763705,13120.3328935575,5804.92298665816,4632.61595433107,1349.16750346267,2053.09748095186,5273.6869335537,18895.1671059816,508.191628389426,12089.7521882057,180,1035,1215,186.216891278081,7518.39278363315,4414.74003411912,1170,593.130102354156,180,720,900,4144.10552394528,2188.68566458671,5320.84181758203,4660.40943176221,2240.85215748019,3159.81173475218,22913.2239877259,720,2159.99999999999,1116.86989764584,2127.93557229735,11996.1447117215,6009.24127086249,3505.7755755975,219.307648116106,7988.24367880583,2148.64720455253,3524.4917882159,1133.09819389719,2976.30922839578,406.755286882165,4506.94639017983,6846.76022371064,10060.8071353867,1251.82068052006,4315.42931626086,771.126932231477,8191.08147607367,1296.10062466937,3655.32885138737,885.749967302196,4568.559989571,1888.09381939117,3334.07206759208,6884.02725829609,1833.1810908181,2474.52354949618,2242.66230917874,3411.03123688071,13451.2416534548,4294.22067438361,10103.4974309388,0,2834.54287655595,9409.97138225756,4957.99550748413,5885.9529552187,2866.37525357511,5172.94087622856,3259.3148114763,4256.92434464901,2066.65521127782,2976.87326661617,1491.11993034364,9266.81061954866,7883.41470458901,8570.55747944313,5764.0805052272,1569.96652254544,1785.74996730219,13121.945490209,3973.34592291311,5298.41792449763,390.510237406115,4504.82826745188,178.579538246821,19774.4650067667,13214.3544977301,3755.62244275173,3188.80710142363,5325.45631009413,7294.11377629145,15910.0496300536,9497.74195602245,1902.1930314906,4804.42538911669,3900.90745735125,6715.76111981466,933.563503497056,22052.1291222574,7497.54676464341,1304.74165473551,7204.40205445151,14301.6111910688,3052.37479262084,1170,5801.70326293676,945,953.130102354156,18119.8122738672,3606.74830171184,270,306.869897645844,3436.26020470831,1144.94238458169,1260,6482.79712830882,8323.6468576318,3764.38609179803,2398.27926420454,2831.26495090264,6788.63285601575,622.580833843988,3637.70560526783,1858.92775054351,4912.27367341898,14131.3962544752,4797.73727531396,2730.24590529924,10559.9540759088,3632.6174449349,16322.3486468411,17228.2897222272,3425.90694128655,6411.83698981957,3367.84963636308,1010.5149976095,5635.64558667422,18123.4156143694,6600.45182855837,6471.46396010761,2669.53339802399,10574.3373000899,11669.3235702919,4111.056566877,10324.7902612827,5726.08572168347,22489.0574325132,9197.65200554025,8536.34694688892,9763.95529728137,818.130102354156,11966.7998583606,6628.88204990549,15391.7574014558,5103.94867292839,22627.4028987295,2580.98670864332,4069.07679876534,2169.91564947513,6892.10057528545,2997.30378984803,10677.350574376,8418.4130419919,5497.0661931503,6337.20267202657,16243.1239155407,21170.8871583206,8811.85023922904,7101.83701972446,2831.51532568944,7131.1455898387,4658.65662745868,14610.458506996,6623.78999845499,2495.48266419054,8054.81754383201,1990.8094185547,1170,6904.89290214291,2591.12791126367,6261.9588054184,2634.18791672749,6919.92253937225,10349.2760848812,4084.64674329904,4684.33110231614,13518.9886886843,8854.24013645241,3231.60991528963,2164.34948822922,7195.69207050976,7492.69432966493,7842.80608002548,16636.7953842143,2116.77044211442,8000.13693348802,4182.21891473018,6963.12035974123,3628.57339407135,8411.28456039707,11155.4386600814,3621.25679592843,4042.93142535231,3375.25098030131,2869.94464511499,5092.5379381235,925.863603361882,2933.13010235415,20646.4283312128,13807.3657098392,8437.52815062813,9983.89996771967,3244.34948822922,2947.95364820152,724.36120180057,14540.4333556776,0,0,3803.90757955902,12239.3216212065,31769.6822535851,13265.5328009496,8668.80909161276,3329.07260987807,4711.05883960009,2341.57112500981,4397.11256685015,29641.4688444721,1839.00898678332,7289.23461117108,5532.80972656832,2614.84419761872,9927.48698443175,504.836105954859,13025.5448950505,2733.61235120479,2937.90978105108,19126.0527838085,5290.41274228268,5743.14686116167,5122.60033246784,883.739795291688,2241.80653281616,4216.79891763757,4424.26734655657,3350.60969293753,9770.56811761714,4774.84451900438,6250.29185485058,0,4113.95110243274,14862.3137569874,572.520409416623,6286.54185552195,6832.65697720997,3072.12238818749,1751.72846395179,5585.20960002455,21713.1106081579,3409.73748185386,7371.2409021595,3260.60969293753,3278.47796939759,1616.73515946393,9457.89037245807,10187.8137867671,3394.52084149398,4779.40345751212,8182.46528552899,14704.0980825393,3702.18682070081,3516.45520702876,15623.1301023541,3396.61118806332,18949.6212497162,11412.4682955468,3096.86989764584,3149.50416413468,14742.1989037166,8412.31549058136,5869.3652635344,564.150577166387,9407.29797042948,3774.4608637975,4613.51827319851,6694.96172961939,2429.63584654585,2793.89763249855,4894.54549096238,4137.74495683086,4934.788748019,2409.39030706246,3979.5290021735,2053.98662219802,3308.98691761616,1264.29416578059,2111.99536163376,11395.290561394,3696.64579856467,3086.39125752995,14629.6482954257,1711.92888116915,8024.81194033277,9186.91388216985,24707.105907598,7102.69148932991,2932.05233931184,7120.88564050481,14590.0128520938,12133.224640125,4345.43289121247,405,7366.81731606871,6932.48622214689,2170.30484646876,3866.24266233463,6406.87294279934,9523.08586325005,4240.27487253453,2138.44648506588,1861.68778316806,742.753137141684,3677.66095994272,3535.16296856952,7382.38979307912,3892.6934475735,291.672060279993,3602.58657582848,9340.60011052083,5251.01337211907,28897.7186069639,943.602818972703,1770.80621038315,2443.94553857205,5150.16952613344,1116.86989764584,2493.43494882292,314.332691644164,4697.18161584023,12486.8518987467,18902.6127162352,6756.20347530698,616.120549219012,4701.8327499423,1978.50651716779,5299.34137399976,6102.99569320298,90,17273.3980655624,10316.5010914218,3762.21043420908,638.130102354156,2853.43494882292,5318.27677158153,552.564984176322,3103.62869492621,1437.92522567969,3861.44677011157,14285.4502467846,18378.599520927,4169.50254461658,2833.22955788557,4309.09505874294,4193.13010235415,7995.15572475273,5586.45512178054,682.890372458075,3753.43464736414,7537.41095095943,1630.18224440823,4230.52378157455,5670,1494.51450363021,1620,3060,90,3944.61695985527,1034.33508850196,3073.43343963081,4875.50954429202,1800,2990.60969293753,6846.13297100225,2025.97439296167,2628.19477174459,17723.0263472184,7337.54284704927,5165.50460208787,1037.84109988482,15996.4192709022,22263.0852205583,11822.3887103251,7757.25002318783,9730.06049889436,22771.5964516653,9167.47822913782,2668.10245975012,4808.19443299449,1971.63016774976,2126.37114685172,2355.05985355537,3188.89214647608,4840.75245919496,14083.9365333354,4280.19617554328,4636.56777958155,4943.25266216585,1068.42877971444,3716.10620011846,1261.0428977948,859.660899340059,7425.19741192209,20742.5124107873,5658.25580528135,3312.17506618087,922.380135051959,1345.55207751922,606.045518340289,1897.46279399832,1483.98225983435,0,0,14063.0293087538,2946.93276281019,7337.78104638405,4347.44104851594,9549.82805088323,11765.3518767469,9497.25914736823,21101.3229208963,10513.5181786805,28409.1029301232,9576.45028631787,4406.10903702094,992.447600498416,19042.3278214698,3443.06085301569,3039.39030706246,3332.81973793562,6101.71286143982,3126.26387767161,2143.73979529168,10516.8678722515,7819.41097195451,21551.8653679002,2024.76820677941,3352.32981740267,5229.00446337887,10984.3768819848,4655.60950764435,4142.78111593324,14346.2607687889,3396.57180876879,11586.7830271289];
	// Can specify a custom tick Array.
    // Ticks should match up one for each y value (category) in the series.
    //var ticks = [635202139, 635202143, 635202157, 635202171, 635202188, 635202203, 635202243, 635202245, 635202248, 635202251, 635202252, 635202265, 635202270, 635202277, 635202283, 635202285, 635202286, 635202288, 635202330, 635202345, 635202358, 635202362, 635202376, 635202381, 635202393, 635202394, 635202398, 635202400, 635202407, 635202421, 635202439, 635202449, 635202464, 635202465, 635202481, 635202482, 635202484, 635202490, 635202494, 635202504, 635202505, 635202524, 635202532, 635202534, 635202538, 635202542, 635202544, 635202547, 635202548, 635202550, 635202554, 635202565, 635202570, 635202599, 635202604, 635202610, 635202615, 635202620, 635202642, 635202652, 635202656, 635202658, 635202659, 635202665, 635202671, 635202681, 635202697, 635202702, 635202706, 635202711, 635202718, 635202719, 635202721, 635202722, 635202733, 635202777, 635202784, 635202789, 635202799, 635202801, 635202815, 635202828, 635202858, 635202883, 635202888, 635202902, 635202909, 635202916, 635202921, 635202944, 635202946, 635202964, 635203009, 635203011, 635203013, 635203030, 635203048, 635203051, 635203063, 635203068, 635203072, 635203082, 635203083, 635203096, 635203109, 635203114, 635203117, 635203125, 635203132, 635203155, 635203157, 635203159, 635203160, 635203169, 635203175, 635203183, 635203204, 635203216, 635203230, 635203243, 635203249, 635203270, 635203278, 635203299, 635203300, 635203301, 635203312, 635203313, 635203316, 635203327, 635203328, 635203335, 635203357, 635203362, 635203384, 635203388, 635203391, 635203405, 635203433, 635203436, 635203439, 635203449, 635203456, 635203475, 635203477, 635203479, 635203487, 635203503, 635203517, 635203532, 635203544, 635203549, 635203554, 635203564, 635203566, 635203578, 635203584, 635203635, 635203636, 635203654, 635203657, 635203670, 635203675, 635203688, 635203699, 635203703, 635203712, 635203714, 635203735, 635203737, 635203739, 635203750, 635203766, 635203771, 635203782, 635203789, 635203790, 635203809, 635203814, 635203842, 635203845, 635203849, 635203851, 635203852, 635203867, 635203883, 635203906, 635203913, 635203922, 635203923, 635203926, 635203935, 635203937, 635203943, 635203948, 635203949, 635203955, 635203975, 635203976, 635203986, 635203989, 635203995, 635204032, 635204035, 635204041, 635204052, 635204080, 635204108, 635204119, 635204125, 635204129, 635204143, 635204165, 635204168, 635204171, 635204190, 635204193, 635204197, 635204204, 635204221, 635204227, 635204234, 635204248, 635204256, 635204315, 635204316, 635204319, 635204324, 635204329, 635204335, 635204347, 635204350, 635204354, 635204358, 635204365, 635204376, 635204384, 635204404, 635204411, 635204419, 635204424, 635204427, 635204428, 635204451, 635204465, 635204471, 635204478, 635204486, 635204489, 635204500, 635204508, 635204518, 635204522, 635204540, 635204544, 635204554, 635204568, 635204575, 635204579, 635204582, 635204614, 635204638, 635204653, 635204676, 635204699, 635204700, 635204718, 635204722, 635204728, 635204735, 635204737, 635204745, 635204766, 635204772, 635204785, 635204787, 635204788, 635204790, 635204791, 635204806, 635204818, 635204828, 635204838, 635204843, 635204853, 635204870, 635204876, 635204878, 635204881, 635204887, 635204912, 635204923, 635204931, 635204932, 635204935, 635204940, 635204952, 635204961, 635204975, 635204988, 635204997, 635205029, 635205034, 635205051, 635205069, 635205085, 635205091, 635205098, 635205122, 635205124, 635205132, 635205144, 635205148, 635205150, 635205170, 635205188, 635205203, 635205212, 635205239, 635205252, 635205254, 635205269, 635205280, 635205281, 635205298, 635205310, 635205319, 635205330, 635205347, 635205406, 635205417, 635205433, 635205445, 635205447, 635205462, 635205477, 635205489, 635205494, 635205499, 635205514, 635205525, 635205526, 635205545, 635205546, 635205547, 635205549, 635205561, 635205568, 635205577, 635205581, 635205598, 635205604, 635205612, 635205628, 635205641, 635205644, 635205645, 635205650, 635205663, 635205702, 635205703, 635205727, 635205737, 635205738, 635205743, 635205751, 635205758, 635205768, 635205773, 635205783, 635205787, 635205791, 635205806, 635205851, 635205854, 635205867, 635205882, 635205887, 635205890, 635205894, 635205911, 635205931, 635205939, 635205968, 635205971, 635205977, 635205984, 635205994, 635205995, 635206002, 635206003, 635206020, 635206034, 635206037, 635206041, 635206046, 635206052, 635206060, 635206080, 635206094, 635206109, 635206120, 635206122, 635206134, 635206149, 635206151, 635206159, 635206161, 635206163, 635206168, 635206174, 635206175, 635206231, 635206234, 635206235, 635206243, 635206261, 635206263, 635206298, 635206314, 635206321, 635206331, 635206363, 635206375, 635206381, 635206391, 635206405, 635206406, 635206407, 635206408, 635206410, 635206417, 635206438, 635206444, 635206446, 635206452, 635206459, 635206461, 635206463, 635206484, 635206489, 635206501, 635206512, 635206526, 635206541, 635206554, 635206557, 635206577, 635206587, 635206588, 635206589, 635206593, 635206599, 635206619, 635206628, 635206629, 635206643, 635206652, 635206662, 635206666, 635206689, 635206722, 635206744, 635206750, 635206791, 635206793, 635206797, 635206804, 635206812, 635206822, 635206835, 635206846, 635206848, 635206864, 635206867, 635206871, 635206873, 635206902, 635206912, 635206917, 635206961, 635206983, 635206995, 635207008, 635207011, 635207016, 635207027, 635207032, 635207060, 635207084, 635207121, 635207158, 635207168, 635207169, 635207178, 635207180, 635207182, 635207191, 635207194, 635207206, 635207220, 635207225, 635207226, 635207239, 635207251, 635207287, 635207297, 635207299, 635207304, 635207315, 635207316, 635207347, 635207348, 635207349, 635207353, 635207362, 635207363, 635207368, 635207380, 635207385, 635207390, 635207391, 635207393, 635207421, 635207449, 635207455, 635207471, 635207475, 635207481, 635207506, 635207511, 635207541, 635207548, 635207552, 635207554, 635207558, 635207566, 635207585, 635207600, 635207608, 635207614, 635207619, 635207626, 635207629, 635207676, 635207683, 635207691, 635207698, 635207702, 635207730, 635207741, 635207748, 635207752, 635207772, 635207776, 635207811, 635207819, 635207824, 635207829, 635207844, 635207870, 635207875, 635207882, 635207887, 635207888, 635207889, 635207893, 635207920, 635207928, 635207933, 635207934, 635207940, 635207953, 635207960, 635207965, 635207974, 635207996, 635207998, 635208008, 635208024, 635208026, 635208034, 635208039, 635208065, 635208096, 635208099, 635208100, 635208106, 635208109, 635208111, 635208117, 635208122, 635208124, 635208165, 635208166, 635208170, 635208177, 635208192, 635208194, 635208197, 635208199, 635208220, 635208222, 635208225, 635208238, 635208243, 635208267, 635208272, 635208280, 635208282, 635208307, 635208314, 635208352, 635208361, 635208379, 635208393, 635208403, 635208417, 635208446, 635208454, 635208466, 635208467, 635208476, 635208498, 635208499, 635208516, 635208536, 635208540, 635208543, 635208549, 635208570, 635208572, 635208596, 635208614, 635208622, 635208626, 635208631, 635208641, 635208653, 635208666, 635208698, 635208709, 635208716, 635208742, 635208749, 635208750, 635208761, 635208779, 635208784, 635208801, 635208802, 635208816, 635208819, 635208827, 635208831, 635208839, 635208842, 635208850, 635208852, 635208855, 635208861, 635208862, 635208871, 635208874, 635208888, 635208890, 635208891, 635208903, 635208912, 635208925, 635208935, 635208947, 635208961, 635208963, 635208964, 635208966, 635208997, 635209036, 635209040, 635209044, 635209067, 635209069, 635209071, 635209072, 635209075, 635209077, 635209080, 635209088, 635209090, 635209100, 635209112, 635209120, 635209137, 635209144, 635209169, 635209182, 635209190, 635209192, 635209194, 635209199, 635209201, 635209204, 635209208, 635209219, 635209222, 635209233, 635209242, 635209246, 635209259, 635209260, 635209274, 635209275, 635209280, 635209287, 635209302, 635209308, 635209313, 635209315, 635209324, 635209334, 635209351, 635209356, 635209373, 635209393, 635209402, 635209412, 635209448, 635209453, 635209470, 635209471, 635209472, 635209496, 635209502, 635209503, 635209511, 635209513, 635209542, 635209557, 635209559, 635209563, 635209568, 635209578, 635209593, 635209597, 635209603, 635209616, 635209617, 635209620, 635209627, 635209636, 635209643, 635209663, 635209669, 635209677, 635209685, 635209687, 635209689, 635209693, 635209707, 635209715, 635209724, 635209734, 635209739, 635209744, 635209758, 635209762, 635209765, 635209766, 635209784, 635209786, 635209790, 635209798, 635209806, 635209808, 635209821, 635209852, 635209894, 635209900, 635209902, 635209909, 635209914, 635209920, 635209926, 635209950, 635209954, 635209957, 635209963, 635209968, 635209970, 635209986, 635210006, 635210026, 635210028, 635210074, 635210075, 635210080, 635210091, 635210109, 635210128, 635210132, 635210140, 635210156, 635210172, 635210183, 635210196, 635210204, 635210205, 635210219, 635210228, 635210230, 635210232, 635210235, 635210236, 635210262, 635210263, 635210265, 635210271, 635210272, 635210295, 635210302, 635210303, 635210314, 635210320, 635210322, 635210329, 635210358, 635210384, 635210428, 635210432, 635210442, 635210451, 635210459, 635210466, 635210467, 635210475, 635210477, 635210495, 635210512, 635210514, 635210521, 635210523, 635210533, 635210540, 635210544, 635210550, 635210568, 635210587, 635210588, 635210602, 635210612, 635210619, 635210635, 635210637, 635210646, 635210709, 635210731, 635210745, 635210760, 635210764, 635210765, 635210768, 635210806, 635210808, 635210817, 635210830, 635210834, 635210837, 635210841, 635210852, 635210859, 635210860, 635210868, 635210884, 635210902, 635210907, 635210910, 635210919, 635210947, 635210949, 635210952, 635210964, 635211016, 635211018, 635211032, 635211037, 635211041, 635211044, 635211050, 635211062, 635211071, 635211087, 635211115, 635211121, 635211123, 635211126, 635211140, 635211141, 635211158, 635211170, 635211180, 635211192, 635211205, 635211224, 635211228, 635211264, 635211283, 635211337, 635211341, 635211344, 635211358, 635211363, 635211364, 635211369, 635211373, 635211374, 635211411, 635211422, 635211425, 635211429, 635211431, 635211442, 635211443, 635211450, 635211451, 635211452, 635211465, 635211468, 635211469, 635211497, 635211501, 635211505, 635211511, 635211512, 635211513, 635211514, 635211523, 635211535, 635211538, 635211549, 635211572, 635211579, 635211600, 635211601, 635211607, 635211612, 635211623, 635211628, 635211629, 635211648, 635211649, 635211657, 635211669, 635211675, 635211709, 635211729, 635211769, 635211771, 635211784, 635211790, 635211808, 635211822, 635211827, 635211838, 635211846, 635211865, 635211868, 635211873, 635211881, 635211887, 635211892, 635211899, 635211904, 635211914, 635211917, 635211919, 635211920, 635211923, 635211930, 635211957, 635211962, 635211970, 635211975, 635211992, 635211995, 635212012, 635212021, 635212022, 635212036, 635212043, 635212063, 635212069, 635212077, 635212091, 635212094, 635212096, 635212106, 635212109, 635212113, 635212118, 635212123];
	var ticks
    var plot1 = $.jqplot(containerElementId, [s1], {
        // The "seriesDefaults" option is an options object that will
        // be applied to all series in the chart.
        seriesDefaults: {
            renderer: $.jqplot.BarRenderer,
            rendererOptions: { fillToZero: true }
        },
        // Custom labels for the series are specified with the "label"
        // option on the series option.  Here a series option object
        // is specified for each series.
        //series: [
            //{ label: 'Rato' },
            //{ label: 'Teclado' },
          //  { label: 'Acelarometro' }
        //],
        // Show the legend and put it outside the grid, but inside the
        // plot container, shrinking the grid to accomodate the legend.
        // A value of "outside" would not shrink the grid and allow
        // the legend to overflow the container.
      //  legend: {
       //     show: true,
       //     placement: 'outsideGrid'
       // },
        axes: {
            // Use a category axis on the x axis and use our custom ticks.
            xaxis: {
                renderer: $.jqplot.CategoryAxisRenderer,
                ticks: ticks
            },
            // Pad the y axis just a little so bars can get close to, but
            // not touch, the grid boundaries.  1.2 is the default padding.
            yaxis: {
                pad: 1.2,
                 min: 0,
                tickOptions: { formatString: '%d' }
            }
        }
    });
}

function setupDashboardChart3(containerElementId) {
    var s1 = [1, 0, 2, 0, 1, 0, 0, 1, 0];
    var s2 = [1, 1, 0, 0, 1, 0, 0, 0, 1];
    var s3 = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    // Can specify a custom tick Array.
    // Ticks should match up one for each y value (category) in the series.
    var ticks = ['Sábado', 'Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta'];

    var plot1 = $.jqplot(containerElementId, [s1, s2, s3], {
        // The "seriesDefaults" option is an options object that will
        // be applied to all series in the chart.
        seriesDefaults: {
            renderer: $.jqplot.BarRenderer,
            rendererOptions: { fillToZero: true }
        },
        // Custom labels for the series are specified with the "label"
        // option on the series option.  Here a series option object
        // is specified for each series.
        series: [
            { label: 'Rato' },
            { label: 'Teclado' },
            { label: 'Acelarometro' }
        ],
        // Show the legend and put it outside the grid, but inside the
        // plot container, shrinking the grid to accomodate the legend.
        // A value of "outside" would not shrink the grid and allow
        // the legend to overflow the container.
        legend: {
            show: true,
            placement: 'outsideGrid'
        },
        axes: {
            // Use a category axis on the x axis and use our custom ticks.
            xaxis: {
                renderer: $.jqplot.CategoryAxisRenderer,
                ticks: ticks
            },
            // Pad the y axis just a little so bars can get close to, but
            // not touch, the grid boundaries.  1.2 is the default padding.
            yaxis: {
                pad: 1.0,
                tickOptions: { formatString: '%d' }
            }
        }
    });
}

//points charts

function drawPointsChart(containerElement) {


    var cosPoints = [];
    for (var i = 0; i < 2 * Math.PI; i += 0.4) {
        cosPoints.push([i, Math.cos(i)]);
    }

    var sinPoints = [];
    for (var i = 0; i < 2 * Math.PI; i += 0.4) {
        sinPoints.push([i, 2 * Math.sin(i - .8)]);
    }

    var powPoints1 = [];
    for (var i = 0; i < 2 * Math.PI; i += 0.4) {
        powPoints1.push([i, 2.5 + Math.pow(i / 4, 2)]);
    }

    var powPoints2 = [];
    for (var i = 0; i < 2 * Math.PI; i += 0.4) {
        powPoints2.push([i, -2.5 - Math.pow(i / 4, 2)]);
    }

    var plot3 = $.jqplot(containerElement, [cosPoints, sinPoints, powPoints1, powPoints2],
    {
        title: 'Line Style Options',
        // Series options are specified as an array of objects, one object
        // for each series.
        series: [
          {
              // Change our line width and use a diamond shaped marker.
              lineWidth: 2,
              markerOptions: { style: 'dimaond' }
          },
          {
              // Don't show a line, just show markers.
              // Make the markers 7 pixels with an 'x' style
              showLine: false,
              markerOptions: { size: 7, style: "x" }
          },
          {
              // Use (open) circlular markers.
              markerOptions: { style: "circle" }
          },
          {
              // Use a thicker, 5 pixel line and 10 pixel
              // filled square markers.
              lineWidth: 5,
              markerOptions: { style: "filledSquare", size: 10 }
          }
      ]
    }
  );

}

//draw pie chart
function drawPieChart(containerElement) {
    var data = [
    ['Heavy Industry', 12], ['Retail', 9], ['Light Industry', 14],
    ['Out of home', 16], ['Commuting', 7], ['Orientation', 9]
  ];
    var plot1 = jQuery.jqplot('chart1', [data],
    {
        seriesDefaults: {
            // Make this a pie chart.
            renderer: jQuery.jqplot.PieRenderer,
            rendererOptions: {
                // Put data labels on the pie slices.
                // By default, labels show the percentage of the slice.
                showDataLabels: true
            }
        },
        legend: { show: true, location: 'e' }
    }
  );
}
//draw donut chart
function drawDonutChart(containerElement) {
    var s1 = [['a', 6], ['b', 8], ['c', 14], ['d', 20]];
    var s2 = [['a', 8], ['b', 12], ['c', 6], ['d', 9]];

    var plot3 = $.jqplot(containerElement, [s1, s2], {
        seriesDefaults: {
            // make this a donut chart.
            renderer: $.jqplot.DonutRenderer,
            rendererOptions: {
                // Donut's can be cut into slices like pies.
                sliceMargin: 3,
                // Pies and donuts can start at any arbitrary angle.
                startAngle: -90,
                showDataLabels: true,
                // By default, data labels show the percentage of the donut/pie.
                // You can show the data 'value' or data 'label' instead.
                dataLabels: 'value'
            }
        }
    });
}

//draw bar chart
function drawBarchart(containerElement) {
    var s1 = [200, 600, 700, 1000];
    var s2 = [460, -210, 690, 820];
    var s3 = [-260, -440, 320, 200];
    // Can specify a custom tick Array.
    // Ticks should match up one for each y value (category) in the series.
    var ticks = ['May', 'June', 'July', 'August'];

    var plot1 = $.jqplot(containerElement, [s1, s2, s3], {
        // The "seriesDefaults" option is an options object that will
        // be applied to all series in the chart.
        seriesDefaults: {
            renderer: $.jqplot.BarRenderer,
            rendererOptions: { fillToZero: true }
        },
        // Custom labels for the series are specified with the "label"
        // option on the series option.  Here a series option object
        // is specified for each series.
        series: [
            { label: 'Hotel' },
            { label: 'Event Regristration' },
            { label: 'Airfare' }
        ],
        // Show the legend and put it outside the grid, but inside the
        // plot container, shrinking the grid to accomodate the legend.
        // A value of "outside" would not shrink the grid and allow
        // the legend to overflow the container.
        legend: {
            show: true,
            placement: 'outsideGrid'
        },
        axes: {
            // Use a category axis on the x axis and use our custom ticks.
            xaxis: {
                renderer: $.jqplot.CategoryAxisRenderer,
                ticks: ticks
            },
            // Pad the y axis just a little so bars can get close to, but
            // not touch, the grid boundaries.  1.2 is the default padding.
            yaxis: {
                pad: 1.05,
                tickOptions: { formatString: '$%d' }
            }
        }
    });
}
//draw bubble chart
function drawBubbleChart(containerElement) {

    var arr = [[11, 123, 1236, ""], [45, 92, 1067, ""],
  [24, 104, 1176, ""], [50, 23, 610, "A"],
  [18, 17, 539, ""], [7, 89, 864, ""], [2, 13, 1026, ""]];

    var plot1b = $.jqplot(containerElement, [arr], {
        seriesDefaults: {
            renderer: $.jqplot.BubbleRenderer,
            rendererOptions: {
                bubbleAlpha: 0.6,
                highlightAlpha: 0.8,
                showLabels: false
            },
            shadow: true,
            shadowAlpha: 0.05
        }
    });

    // Legend is a simple table in the html.
    // Dynamically populate it with the labels from each data value.
    $.each(arr, function (index, val) {
        $('#' + containerElement).append('<tr><td>' + val[3] + '</td><td>' + val[2] + '</td></tr>');
    });

    // Now bind function to the highlight event to show the tooltip
    // and highlight the row in the legend. 
    $('#' + containerElement).bind('jqplotDataHighlight',
    function (ev, seriesIndex, pointIndex, data, radius) {
        var chart_left = $('#' + containerElement).offset().left,
        chart_top = $('#' + containerElement).offset().top,
        x = plot1b.axes.xaxis.u2p(data[0]),  // convert x axis unita to pixels
        y = plot1b.axes.yaxis.u2p(data[1]);  // convert y axis units to pixels
        var color = 'rgb(50%,50%,100%)';
        $('#tooltip1b').css({ left: chart_left + x + radius + 5, top: chart_top + y });
        $('#tooltip1b').html('<span style="font-size:14px;font-weight:bold;color:' +
      color + ';">' + data[3] + '</span><br />' + 'x: ' + data[0] +
      '<br />' + 'y: ' + data[1] + '<br />' + 'r: ' + data[2]);
        $('#tooltip1b').show();
        $('#legend1b tr').css('background-color', '#ffffff');
        $('#legend1b tr').eq(pointIndex + 1).css('background-color', color);
    });

    // Bind a function to the unhighlight event to clean up after highlighting.
    $('#' + containerElement).bind('jqplotDataUnhighlight',
      function (ev, seriesIndex, pointIndex, data) {
          $('#tooltip1b').empty();
          $('#tooltip1b').hide();
          $('#' + containerElement + ' tr').css('background-color', '#ffffff');
      });
}

//-------------------------------------------------------------- */
// Gallery Actions
//-------------------------------------------------------------- */

function initializeGallery() {
    // When hovering over gallery li element
    $("ul.gallery li").hover(function () {

        var $image = (this);

        // Shows actions when hovering
        $(this).find(".actions").show();

        // If the "x" icon is pressed, show confirmation (#dialog-confirm)
        $(this).find(".actions .delete").click(function () {

            // Confirmation
            $("#dialog-confirm").dialog({
                resizable: false,
                modal: true,
                minHeight: 0,
                draggable: false,
                buttons: {
                    "Delete": function () {
                        $(this).dialog("close");

                        // Removes image if delete is pressed
                        $($image).fadeOut('slow', function () {
                            $($image).remove();
                        });

                    },

                    // Removes dialog if cancel is pressed
                    Cancel: function () {
                        $(this).dialog("close");
                    }
                }
            });

            return false;
        });


        // Changes opacity of the image
        $(this).find("img").css("opacity", "0.5");

        // On hover off
        $(this).hover(function () {
        }, function () {

            // Hides actions when hovering off
            $(this).find(".actions").hide();

            // Changes opacity of the image back to normal
            $(this).find("img").css("opacity", "1");

        });
    });
}
function setupGallery() {

    initializeGallery();
    //-------------------------------------------------------------- */
    //
    // 	**** Gallery Sorting (Quicksand) **** 
    //
    // 	For more information go to:
    //	http://razorjack.net/quicksand/
    //
    //-------------------------------------------------------------- */

    $('ul.gallery').each(function () {

        // get the action filter option item on page load
        var $fileringType = $("ul.sorting li.active a[data-type]").first().before(this);
        var $filterType = $($fileringType).attr('data-id');

        var $gallerySorting = $(this).parent().prev().children('ul.sorting');

        // get and assign the ourHolder element to the
        // $holder varible for use later
        var $holder = $(this);

        // clone all items within the pre-assigned $holder element
        var $data = $holder.clone();

        // attempt to call Quicksand when a filter option
        // item is clicked
        $($gallerySorting).find("a[data-type]").click(function (e) {
            // reset the active class on all the buttons
            $($gallerySorting).find("a[data-type].active").removeClass('active');

            // assign the class of the clicked filter option
            // element to our $filterType variable
            var $filterType = $(this).attr('data-type');
            $(this).addClass('active');
            if ($filterType == 'all') {
                // assign all li items to the $filteredData var when
                // the 'All' filter option is clicked
                var $filteredData = $data.find('li');
            }
            else {
                // find all li elements that have our required $filterType
                // values for the data-type element
                var $filteredData = $data.find('li[data-type=' + $filterType + ']');
            }

            // call quicksand and assign transition parameters
            $holder.quicksand($filteredData, {
                duration: 800,
                easing: 'easeInOutQuad',
                useScaling: true,
                adjustHeight: 'auto'
            }, function () {
                $('.popup').facebox();
                initializeGallery();
            });

            return false;
        });

    });
}

//setup pretty-photo
function setupPrettyPhoto() {

    $("a[rel^='prettyPhoto']").prettyPhoto();
}

//setup tinyMCE

function setupTinyMCE() {
    $('textarea.tinymce').tinymce({
        // Location of TinyMCE script
        script_url: 'js/tiny-mce/tiny_mce.js',

        // General options
        theme: "advanced",
        plugins: "autolink,lists,pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template,advlist",

        // Theme options
        theme_advanced_buttons1: "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,styleselect,formatselect,fontselect,fontsizeselect",
        theme_advanced_buttons2: "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor",
        theme_advanced_buttons3: "tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,|,ltr,rtl,|,fullscreen",
        theme_advanced_buttons4: "insertlayer,moveforward,movebackward,absolute,|,styleprops,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,template,pagebreak",
        theme_advanced_toolbar_location: "top",
        theme_advanced_toolbar_align: "left",
        theme_advanced_statusbar_location: "bottom",
        theme_advanced_resizing: true,

        // Example content CSS (should be your site CSS)
        content_css: "css/content.css",

        // Drop lists for link/image/media/template dialogs
        template_external_list_url: "lists/template_list.js",
        external_link_list_url: "lists/link_list.js",
        external_image_list_url: "lists/image_list.js",
        media_external_list_url: "lists/media_list.js",

        // Replace values for the template plugin
        template_replace_values: {
            username: "Some User",
            staffid: "991234"
        }
    });
}

//setup DatePicker
function setDatePicker(containerElement) {
    var datePicker = $('#' + containerElement);
    datePicker.datepicker({
        showOn: "button",
        buttonImage: "img/calendar.gif",
        buttonImageOnly: true
    });
}
//setup progressbar
function setupProgressbar(containerElement) {
    $("#" + containerElement).progressbar({
        value: 59
    });
}

//setup dialog box

function setupDialogBox(containerElement, associatedButton) {
    $.fx.speeds._default = 1000;
    $("#" + containerElement).dialog({
        autoOpen: false,
        show: "blind",
        hide: "explode"
    });

    $("#" + associatedButton).click(function () {
        $("#" + containerElement).dialog("open");
        return false;
    });
}

//setup accordion

function setupAccordion(containerElement) {
    $("#" + containerElement).accordion();
}

//setup radios and checkboxes
//function setupGrumbleToolTip(elementid) {
//    initializeGrumble(elementid);
//    $('#' + elementid).focus(function () {
//        initializeGrumble(elementid);
//    });
//}

//function initializeGrumble(elementid) {
//    $('#' + elementid).grumble(
//	{
//	    text: 'Whoaaa, this is a lot of text that i couldn\'t predict',
//	    angle: 85,
//	    distance: 50,
//	    showAfter: 1000,
//	    hideAfter: 2000
//	}
//);
//}

//setup left menu

function setupLeftMenu() {
    $("#section-menu")
        .accordion({
            "header": "a.menuitem"
        })
        .bind("accordionchangestart", function (e, data) {
            data.newHeader.next().andSelf().addClass("current");
            data.oldHeader.next().andSelf().removeClass("current");
        })
        .find("a.menuitem:first").addClass("current")
        .next().addClass("current");
		
		$('#section-menu .submenu').css('height','auto');
}
